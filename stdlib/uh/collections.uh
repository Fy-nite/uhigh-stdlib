namespace StdLib
{
    /// <summary>
    /// Collection utilities for Î¼High
    /// </summary>
    public static class Collections
    {
        /// <summary>
        /// Creates a range of integers
        /// </summary>
        /// <param name="end">End value (exclusive)</param>
        /// <returns>A list containing the range</returns>
        public static func Range(end: int): List<int>
        {
            var result = new List<int>();
            for (var i = 0; i < end; i++)
            {
                result.Add_to(i);
            }
            return result;
        }
        
        /// <summary>
        /// Creates a range of integers with a start value
        /// </summary>
        /// <param name="start">Start value (inclusive)</param>
        /// <param name="end">End value (exclusive)</param>
        /// <returns>A list containing the range</returns>
        public static func Range(start: int, end: int): List<int>
        {
            var result = new List<int>();
            for (var i = start; i < end; i++)
            {
                result.Add_to(i);
            }
            return result;
        }
        
        /// <summary>
        /// Creates a range with a step value
        /// </summary>
        /// <param name="start">Start value</param>
        /// <param name="end">End value</param>
        /// <param name="step">Step size</param>
        /// <returns>A list containing the range</returns>
        public static func Range(start: int, end: int, step: int): List<int>
        {
            var result = new List<int>();
            if (step > 0)
            {
                for (var i = start; i < end; i += step)
                {
                    result.Add_to(i);
                }
            }
            else if (step < 0)
            {
                for (var i = start; i > end; i += step)
                {
                    result.Add_to(i);
                }
            }
            return result;
        }
        
        /// <summary>
        /// Maps a function over each element in a collection
        /// </summary>
        /// <param name="collection">The source collection</param>
        /// <param name="mapper">The mapping function</param>
        /// <returns>A new collection with mapped values</returns>
        public static func Map<T, R>(collection: List<T>, mapper: Func<T, R>): List<R>
        {
            var result = new List<R>();
            for (var i = 0; i < collection.Count; i++)
            {
                result.Add_to(mapper(collection[i]));
            }
            return result;
        }
        
        /// <summary>
        /// Filters elements from a collection
        /// </summary>
        /// <param name="collection">The source collection</param>
        /// <param name="predicate">The filter predicate</param>
        /// <returns>A filtered collection</returns>
        public static func Filter<T>(collection: List<T>, predicate: Func<T, bool>): List<T>
        {
            var result = new List<T>();
            for (var i = 0; i < collection.Count; i++)
            {
                var item = collection[i];
                if (predicate(item))
                {
                    result.Add_to(item);
                }
            }
            return result;
        }
    }
}